1. VIMS is Veejay's IMS

All control data is distributed via VIMS. Each (atomical) message consists of an Action Identifier and a list of zero or more Arguments which can be used to control Video Clips, Video Streams, the Effect Chain and many other things.

VIMS allows events to be triggered through:
SDL Keyboard Event (libsdl)
OSC (OpenSoundControl)
IMP (Internal Message Protocol)                                  


After intalling veejay, you have a commandline utility sendVIMS 


	$ sendVIMS "182:0 0 140 3;" 

This document describes what messages you can send to veejay through using OSC and veejay's own IMP.

Inside of veejay's source package you will find a test/ directory containing various examples demonstrating
how to load an ActionFile, how to use Perl for batch like video processing and how to attach message bundles to
keyboard events.




1.1 Message Format

A message is described as:

	 <Action Identifer> : <Argument List> ; 

Example:

	080:;
	099:0 0;


<Action Identifier>
The action identifier is a 3 digit number describing a Network Event  
The colon is used to indicate the start of the Argument List and must be given. 


<Argument List>
The Argument List is described by a printf() style formatted template 
which describes the number and type of arguments to be used. 

The semicolon must be given to indicate the end of this message


1.2 Bundled Messages


A message bundle is a special message that contains an ordered list of at least 1 or more messages. Each message is executed from left to right (first in, first out) while parsing the bundle.   


Example:

	5032|BUN:004{084:0;175:;182:0 3 56 230 93 0;182:0 4 1 7;}|
	5033|BUN:005{084:0;175:;182:0 3 56 230 93 0;182:0 4 1 7;182:0 5 1 7;}|
	5034|BUN:005{084:0;175:;182:0 3 56 230 93 0;182:0 4 1 7;182:0 5 1 8;}|


A message bundle is described as:

	 BUN: <Number of Messages> { 
		<Action Idenfifier> : <Argument List> ;
		<Action Identifier> : <Argument List> ;
		... 
		}
		;


The token 'BUN:' indicates the start of a messaage bundle, the first 3 digit numeric value represents the total number of messages in the bundle. The '{' symbol indicates the start of a message block and is ended with '};' or just '}'. 


1.3Format of an Action File/Attaching Keys to Bundles

	<5001 - 5999> | <message bundle> |

The contents of some action file can be :

	5016|BUN:002{175:;178:0 100;}|



The message bundle BUN ... specifies 2 messages to be sent, namely 175 (enable chain) and 178 (fade to effect chain).
This message bundle is attached to action identifier 5002 and can be invoked when sending

	050:5002;

The message bundle can be attached to a key , for example 'SHIFT + A' by sending 
	
	053:5016 97 3;

Which attaches bundle '5016' to SDL key '97' using a modifier '3', which is SHIFT. 

2. OSC  - Open Sound Control

The OpenSound Control WWW page is
	http://www.cnmat.berkeley.edu/OpenSoundControl

(quote from the website)

OpenSound Control ("OSC") is a protocol for communication among computers, sound synthesizers, and other multimedia devices that is optimized for modern networking technology.

Veejay starts up an OSC server that listens on port number VJ_PORT + 2  (usually 3492). In the veejay/libOMC/send+dump you can compile a test application that sends OSC strings to veejay.
Bundled messages are handled automatically by libOMC  


Type veejay -u |less to see an overview of all actions, it includes OSC. The OSC messages
are mapped onto its respective VIMS Action Identifiers.


EXAMPLES:

	To create a new clip and play it:

	/clip/new 100 200
	/clip/select 0

	To record from a clip and auto play the recording after 10 seconds of PAL video:

	/clip/record/start 250 1

	To add Effect 45 to the clip's Effect Chain 
	
	/clip/chain/entry/add 45

	To fade in the Effect Chain in 4 seconds

	/clip/chain/fade_in 100 

	To add Effect 45 on Entry 4 of clip 2's Effect Chain

	/clip/chain/add 2 4 45

	To play newest clip 

	/clip/select

	To record from a clip and auto play the new clip after recording

	/clip/record 100 1	




General  Template Description


Note that the order of arguments is important,  the order is top-down 
  (i.e  chain entry -> parameter number -> parameter value  ,
        clip_id -> property_value ,
        clip_id -> chain_entry -> property_value -> parameter_value ... )
	

Some reserved numbers:

	clip id	0	:	select currently playing clip	
	clip id	-1	:	select highest clip number 
        entry id -1     :       select current chain entry 
	stream id 0	:	select currently playing stream 
	stream id -1	:	select highest stream number
	modifier	:	0 = normal, 1= alt , 2 = ctrl, 3 = shift
	frame	-1	:	use highest possible frame number (usually num video frames)
		 

