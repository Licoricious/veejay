#Debugging veejay
----------------

Please report any issues here: https://github.com/c0ntrol/veejay/issues


## Redirecting veejay's console output

You can run veejay with the -v commandline flag, telling it to be more
verbosive:

<pre>
$ veejay -v -n > /tmp/logfile
</pre>

You can watch the console logging using tail:

<pre>
$ tail -f /tmp/logfile
</pre>

## Network event logging

You can log all network related events to /tmp/veejay.net.log (file
destination cannot be changed)

<pre>
$ export VEEJAY_LOG_NET_IO=on

$ veejay -v
</pre>

## Crash Recovery

If veejay crahes, it will write your samplelist and edit descision files to
$HOME/.veejay/recovery.

The recovery files can be loaded with:

<pre>
$ veejay /path/to/recovery_editlist_p???.edl -l /path/to/recovery_samplelist_p???.sl
</pre>


## Useful backtraces


A useful backtrace not only contains symbols but also lists the linenumber and
name of the source file

To enable debugging symbols to be build in you must do a clean build and pass
the --enable-debug flag to configure.


<pre>
$ ./configure --enable-debug
$ (make clean)
$ make -j12 && make install
</pre>


You can attach a debugger to veejay, or you can load veejay in the debugger:

<pre>
$ ps -aef |grep veejay
$ gdb -p $PID
</pre>

<pre>
$ gdb /path/to/veejay
...
$ bt
</pre>

Alternatively, you can use valgrind to look for memory leaks, threading
problems, etc:

<pre>

$ valgrind --leak-check=yes --leak-resolution=high --log-file=/tmp/valgrind.veejay.log /path/to/veejay -n -v ...

$ valgrind --tool=helgrind /path/to/veejay -n -v

</pre>

